//     int maxProfit(vector<int>& prices) 
//     {
        
//         int n = prices.size();
//         int currentInvestment = prices[0];
//         int overallProfit = 0;
            
//         for(int i = 0;i<n;i++)
//         {
//             if(i == 0)
//             {
//                 if(i<n-1 && prices[i+1] < prices[i])
//                 {
//                     overallProfit += prices[i] - currentInvestment;
//                     currentInvestment = prices[i+1];
//                 }
//                 else
//                 {
//                     currentInvestment = prices[i];
//                 }
//             }
//             else if(i > 0 && i < n-1)
//             {
//                 if(prices[i] >= prices[i-1] && prices[i] >= prices[i+1])
//                 {
//                     overallProfit += prices[i] - currentInvestment;
//                     currentInvestment = prices[i+1];
//                 }
//                 else if(prices[i] < prices[i-1] && prices[i] < prices[i+1])
//                 {
//                     currentInvestment = prices[i];
//                 }
//                 else if(prices[i-1] > prices[i] && prices[i] > prices[i+1])
//                 {
//                     overallProfit += prices[i] - currentInvestment;
//                     currentInvestment = prices[i+1];
//                 }
//                 else
//                 {
//                     continue;
//                 }
//             }
//             else if(i == n-1 && currentInvestment < prices[i])
//             {
//                 overallProfit += prices[i] - currentInvestment;
//             }
//         }
//         return overallProfit;
//     }
    int maxProfit(vector<int> &prices)
    {
        int profit = 0;
        for (int i = 1; i < prices.size(); i++)
        {
            if (prices[i] > prices[i - 1])
            {
                profit += prices[i] - prices[i - 1];
            }
        }
        return profit;
    }
