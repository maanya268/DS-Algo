   vector<int> productExceptSelf(vector<int>& nums) 
    {
//         int n = nums.size();
//         vector<int> leftProduct(n,0);
//         vector<int> rightProduct(n,0);
//         leftProduct[0] = 1;
//         rightProduct[n-1] = 1;
//         for(int i = 1;i<n;i++)
//         {
//             leftProduct[i] = leftProduct[i-1]*nums[i-1];
//         }
//         for(int i = n-2;i>=0;i--)
//         {
//             rightProduct[i] = rightProduct[i+1]*nums[i+1];
//         }
        
//         vector<int> output(n,0);
//         for(int i = 0;i<n;i++)
//         {
//             output[i] = leftProduct[i]*rightProduct[i];
//         }
//         return output;
        int n = nums.size();
        int leftProduct = 1;
        int rightProduct = 1;
        vector<int> output(n,1);
        
        for(int i = 1;i<n;i++)
        {
            int j = n-i-1;
            leftProduct *= nums[i-1];
            output[i] *= leftProduct;
            rightProduct *= nums[j+1];
            output[j] *= rightProduct;
        }
        return output;
    }
