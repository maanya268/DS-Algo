/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    ListNode* reverse(ListNode*&head)
    {
        if(head == NULL || head->next == NULL)
        {
            return head;
        }
        
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* nxt = head->next;
        
        while(curr != nxt)
        {
            curr->next = prev;
            prev = curr;
            curr = nxt;
            
            if(nxt != NULL)
            {
                nxt = nxt->next;
            }
        }
        return prev;
    }
    
    bool isPalindrome(ListNode* head) 
    { 
        if(head == NULL || head->next == NULL)
        {
            return true;
        }
        ListNode* slow = head;
        ListNode* fast = head->next;
        
        while(fast != NULL && fast->next != NULL)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        
        ListNode* second = slow->next;
        slow->next = NULL;
        
        ListNode* rev = reverse(second);
        
        ListNode* temp1 = head;
        ListNode* temp2 = rev;
        
        while(temp1 != NULL && temp2 != NULL)
        {
            if(temp1->val != temp2->val)
            {
                return false;
            }
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
        return true;
    }
};
