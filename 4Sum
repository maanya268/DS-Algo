class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) 
    {
        vector<vector<int>> output;
        
        int n = nums.size(); 
        sort(nums.begin(),nums.end());
    
        for (int i = 0; i < n;i++) {
        
            int rem1 = target - nums[i];
        
            for (int j = i + 1; j < n;j++) {
            
                int rem2 = rem1 - nums[j];
            
                int left = j + 1;
                int right = n - 1;
            
                while(left < right) {
                
                    int add = nums[left] + nums[right];
                
                    if (add < rem2) 
                    {
                        left++;
                    }
                    else if (add > rem2)
                    {
                        right--;
                    }
                    else 
                    {
                        vector<int> quadruplet(4, 0);

                        quadruplet[0] = nums[i];
                        quadruplet[1] = nums[j];
                        quadruplet[2] = nums[left];
                        quadruplet[3] = nums[right];
                        output.push_back(quadruplet);
                        
                        while (left < right && nums[left] == quadruplet[2])
                        {
                            ++left;
                        }
                        
                        while (left < right && nums[right] == quadruplet[3])
                        {
                            --right;
                        }
                    }
                }
                
                while(j + 1 < n && nums[j + 1] == nums[j])
                {
                    j++;
                }
            }
        
            while (i + 1 < n && nums[i + 1] == nums[i])
            {
                i++;
            }
        }
    
        return output;
    }
};
