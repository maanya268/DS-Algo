class Solution {
public:
    /*
    recursion
    int uniquePathsHelper(int i,int j,int m,int n)
    {
        if(i == m-1 && j == n-1)
        {
            return 1;
        }
        if(i == m || j == n)
        {
            return 0;
        }
        
        return uniquePathsHelper(i+1,j,m,n) + uniquePathsHelper(i,j+1,m,n);
    }
    
    //dp
    
    int uniquePaths(int m, int n) 
    {
        return uniquePathsHelper(0,0,m,n);
    }
    int uniquePaths(int m ,int n)
    {
        vector<vector<int>> output(m,vector<int>(n));
        
        for(int i = 0;i<m;i++)
        {
            output[i][n-1] = 1;
        }
        
        for(int i = 0;i<n;i++)
        {
            output[m-1][i] = 1;
        }
        
        for(int i = m-2;i>=0;i--)
        {
            for(int j = n-2;j>=0;j--)
            {
                output[i][j] = output[i+1][j] + output[i][j+1];
            }
        }
        
        return output[0][0];
    }
    */
    //combinatrics solution
    int uniquePaths(int m,int n)
    {
        int N = m+n-2;
        int r = m-1;
        double res = 1;
        
        for(int i = 1;i<=r;i++)
        {
            res = res * (N-r+i)/i;
        }
        return res;
    }
};
